// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "testing-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: t
func (_m *TaskUsecase) Create(t domain.Task) (domain.Task, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Task) (domain.Task, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(domain.Task) domain.Task); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: taskID
func (_m *TaskUsecase) Delete(taskID string) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *TaskUsecase) Get() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: taskID
func (_m *TaskUsecase) GetByID(taskID string) (domain.Task, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Task, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Task); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *TaskUsecase) GetByUserID(userID string) ([]domain.Task, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Task, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Task); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: taskID, data
func (_m *TaskUsecase) Update(taskID string, data domain.Task) (*domain.Task, error) {
	ret := _m.Called(taskID, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Task) (*domain.Task, error)); ok {
		return rf(taskID, data)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Task) *domain.Task); ok {
		r0 = rf(taskID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.Task) error); ok {
		r1 = rf(taskID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
